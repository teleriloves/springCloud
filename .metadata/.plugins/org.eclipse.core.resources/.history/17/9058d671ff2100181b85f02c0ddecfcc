package evolsoft.concesionario.mockito;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;

import evolsoft.concesionario.dao.CocheDAO;
import evolsoft.concesionario.dto.CocheDTO;
import evolsoft.concesionario.exception.NotFoundExcept;
import evolsoft.concesionario.model.Coche;
import evolsoft.concesionario.service.CocheService;
import evolsoft.concesionario.service.impl.CocheServiceImpl;
import org.junit.Assert;

@RunWith(MockitoJUnitRunner.class)
public class TestCocheServiceMockito {
	
	private static final Integer ID = 288;
	private static final String MATRICULA = "0288KFC";
	private static final String MARCA = "Fiat";
	private static final String MODELO = "Multipla";
	private static final String MOTOR = "1.9 JTD";
	private static final Integer NUM_BASTIDOR = 288288;
	private static final Double PRECIO = 10000.0;
	private static final String FECHA_VENTA = "2004-20-04";
	
	private static final Coche COCHE = new Coche();
	private static final List<Coche> LIST_COCHES = new ArrayList<Coche>();
	
	@InjectMocks
	private CocheService cocheService = new CocheServiceImpl();
	
	@Mock
	CocheDAO cocheDAO;
	
	@Before
	public void init() {
		COCHE.setId(ID);
		COCHE.setMatricula(MATRICULA);
		COCHE.setMarca(MARCA);
		COCHE.setModelo(MODELO);
		COCHE.setMotor(MOTOR);
		COCHE.setNumBastidor(NUM_BASTIDOR);
		COCHE.setPrecio(PRECIO);
		COCHE.setFechaVenta(FECHA_VENTA);
		LIST_COCHES.add(COCHE);
		Mockito.when(cocheDAO.findOne(ID)).thenReturn(COCHE);
		Mockito.when(cocheDAO.findAll()).thenReturn(LIST_COCHES);
		Mockito.when(cocheDAO.save(COCHE)).thenReturn(COCHE);
	}
	
	@Test
	public void testFindCocheOK() throws NotFoundExcept {
		final CocheDTO cocheDTO = cocheService.findById(ID);
		
		
	
		Assert.assertNotNull(cocheDTO);
		Assert.assertEquals(cocheDTO.getId(),ID);
		Assert.assertEquals(cocheDTO.getMatricula(),MATRICULA);
		Assert.assertEquals(cocheDTO.getMarca(),MARCA);
		Assert.assertEquals(cocheDTO.getModelo(),MODELO);
		Assert.assertEquals(cocheDTO.getMotor(),MOTOR);
		Assert.assertEquals(cocheDTO.getNumBastidor(),NUM_BASTIDOR);
		Assert.assertEquals(cocheDTO.getPrecio(),PRECIO);
		Assert.assertEquals(cocheDTO.getFechaVenta(),FECHA_VENTA);
		}
	
	@Test(expected = NotFoundExcept.class)
	public void testFindCocheError() throws NotFoundExcept {
		cocheService.findById(420);
	}
	
}
