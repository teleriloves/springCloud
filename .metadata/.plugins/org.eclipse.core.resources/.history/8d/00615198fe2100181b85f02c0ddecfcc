package evolsoft.concesionario.service.impl;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import evolsoft.concesionario.configuration.PageReqConfig;
import evolsoft.concesionario.dao.CocheDAO;
import evolsoft.concesionario.dto.CocheDTO;
import evolsoft.concesionario.exception.NotFoundExcept;
import evolsoft.concesionario.model.Coche;
import evolsoft.concesionario.service.CocheService;

@Service
public class CocheServiceImpl implements CocheService {

	@Autowired
	private CocheDAO cocheDAO;
	
	@Autowired
	private DozerBeanMapper dozer;
	
	@Override
	public CocheDTO findById(Integer id) throws NotFoundExcept {
		final Coche coche = Optional.ofNullable(cocheDAO.findOne(id))
										  .orElseThrow(() -> new NotFoundExcept("Coche con id "+id+" no encontrado"));
		return map(coche);
	}

	@Override
	public List<CocheDTO> findAll(Integer page, Integer size) {
		final Iterable<Coche> allCoches = cocheDAO.findAll(PageReqConfig.newPageRequest(page, size));
		final List<CocheDTO> coches = new ArrayList<>();
		allCoches.forEach(coche -> 
			{
				final CocheDTO cocheDTO = map(coche);
				coches.add(cocheDTO);
			});
		return coches;
	}

	@Override
	public CocheDTO create(CocheDTO cocheDTO) {
		final Coche coche = map(cocheDTO);
		return map(cocheDAO.save(coche));
	}

	@Override
	public void update(Integer id, CocheDTO cocheDTO) {
		final Coche coche = map(cocheDTO);
		coche.setId(id);
		cocheDAO.save(coche);
	}

	@Override
	public void delete(Integer idCoche) {
		cocheDAO.delete(idCoche);
	}

	@Override
	public Coche map(CocheDTO cocheDTO) {
		Coche coche = Optional.ofNullable(cocheDAO.findOne(cocheDTO.getId())).orElse(new Coche());
		coche.setId(cocheDTO.getId());
		coche.setMatricula(cocheDTO.getMatricula());
		coche.setMarca(cocheDTO.getMarca());
		coche.setModelo(cocheDTO.getModelo());
		coche.setMotor(cocheDTO.getMotor());
		coche.setNumBastidor(cocheDTO.getNumBastidor());
		coche.setPrecio(cocheDTO.getPrecio());
		coche.setFechaVenta(cocheDTO.getFechaVenta());
		return coche;
	}

	@Override
	public CocheDTO map(Coche coche) {
		CocheDTO cocheDTO = new CocheDTO(); 
		cocheDTO.setId(coche.getId());
		cocheDTO.setMatricula(coche.getMatricula());
		cocheDTO.setMarca(coche.getMarca());
		cocheDTO.setModelo(coche.getModelo());
		cocheDTO.setMotor(coche.getMotor());
		cocheDTO.setNumBastidor(coche.getNumBastidor());
		cocheDTO.setPrecio(coche.getPrecio());
		cocheDTO.setFechaVenta(coche.getFechaVenta());
		return cocheDTO;
		
	}

	@Override
	public List<CocheDTO> listCochesSortedByPrice(Integer page, Integer size) {
		final Iterable<Coche> allCoches = cocheDAO.listCarsSortedByPrice();
		final List<CocheDTO> coches = new ArrayList<>();
		allCoches.forEach(coche -> 
			{
				final CocheDTO cocheDTO = map(coche);
				coches.add(cocheDTO);
			});
		return coches;
	}

	@Override
	public List<CocheDTO> findCarsAlreadySold() {
		List<Coche> coches = cocheDAO.findCarsAlreadySold();
		final List<CocheDTO> cochesInStock = new ArrayList<>();
		coches.forEach(coche -> {
			final CocheDTO cocheDTO = map(coche);
			cochesInStock.add(cocheDTO);
		});
		
		return cochesInStock;
	}

	@Override
	public void newSell(Integer idCoche, Integer idCliente, Integer idVendedor) {
		
		CocheDTO soldCarDTO = map(cocheDAO.findOne(idCoche));
		soldCarDTO.setFechaVenta(todayDate());
		update(idCoche, soldCarDTO);
		
	}
	
	public String todayDate()
	{
		DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd");
		String todayDate = dateFormat.format(new Date()); 
		return todayDate;
	}
	
	@Override
	public List<CocheDTO> findCochesInPriceRange(Integer minPrice, Integer maxPrice)
	{
		List<Coche> coches = cocheDAO.findCarsBtwPriceRange(minPrice, maxPrice);
		final List<CocheDTO> cochesInRange = new ArrayList<>();
		coches.forEach(coche -> {
			CocheDTO cocheDTO = map(coche);
			cochesInRange.add(cocheDTO);
		});
		
		return cochesInRange;	
	}

	@Override
	public List<CocheDTO> findCochesInStock() {
		
		List<Coche> coches = cocheDAO.findCarsInStock();
		final List<CocheDTO> cochesInStock = new ArrayList<>();
		coches.forEach(coche -> {
			final CocheDTO cocheDTO = map(coche);
			cochesInStock.add(cocheDTO);
		});
		
		return cochesInStock;
		
	}
	
	
	
}
